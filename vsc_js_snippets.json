{
	"Print to console with separator": {
		"prefix": "qlog",
		"body": [
			"console.log('$1');",
			"console.log('------------------------');"
		],
		"description": "Print to console with separator"
	},
	"Jest describe": {
		"prefix": "qdescribe",
		"body": [
			"describe('$1', () => {",
			"  $0",
			"});"
		],
		"description": "Jest describe"
	},
	"Jest it": {
		"prefix": "qit",
		"body": [
			"it('$1', () => {",
			"  $0",
			"});"
		],
		"description": "Jest it"
	},
	"Jest defined": {
		"prefix": "qdefined",
		"body": [
			"expect($1).toBeDefined();"
		],
		"description": "Jest defined"
	},
	"Jest expect": {
		"prefix": "qexpect",
		"body": [
			"const expected = $1;",
			"const received = $2;",
			"expect(expected).toEqual(received);"
		],
		"description": "Jest expect"
	},
	"Presentational component": {
		"prefix": "qprescomp",
		"body": [
			"import React from 'react';",
			"import PropTypes from 'prop-types';",
			"",
			"const propTypes = {$0};",
			"",
			"const ${1:name} = (${2:props}) => {",
			"  return (",
			"    $3",
			"  );",
			"};",
			"",
			"${1:name}.propTypes = propTypes;",
			"",
			"export default ${1:name};"
		],
		"description": "Stateless functional, presentational component with PropTypes"
	},
	"Reducer": {
		"prefix": "qreducer",
		"body": [
			"const INITIAL_STATE = {$1};",
			"",
			"export default function reducer(state = INITIAL_STATE, action) {",
			"  const { type, payload } = action;",
			"  switch(type) {",
			"    $0",
			"    default:",
			"      return state;",
			"  }",
			"}"
		],
		"description": "Redux reducer function"
	},
	"Named action creator function": {
		"prefix": "qaction",
		"body": [
			"const ${1:name} = (${2:params}) => ({",
			"  type: $3,",
			"  payload: $4,",
			"});"
		],
		"description": "Named action creator function"
	},
	"Named thunk action": {
		"prefix": "qthunk",
		"body": [
			"const ${1:name} = (${2:params}) => {",
			"  return (dispatch) => {",
			"    $0",
			"  }",
			"};"
		],
		"description": "Named thunk action"
	},
	"Named function": {
		"prefix": "qnf",
		"body": [
			"const ${1:name} = ($2) => {",
			"  $0",
			"}"
		],
		"description": "Named function"
	},
	"Module exports": {
		"prefix": "qme",
		"body": [
			"module.exports"
		],
		"description": "Module exports"
	},
	"For loop": {
		"prefix": "qfor",
		"body": [
			"for (let i = 0; i < $1; ++i) {",
			"  $0",
			"}"
		],
		"description": "For loop"
	}
}